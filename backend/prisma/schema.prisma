generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String
  password      String
  phone         String?
  role          UserRole          @default(USER)
  isVerified    Boolean           @default(false)
  avatar        String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  bookings      Booking[]
  loyaltyPoints LoyaltyPoint?
  reviews       Review[]
  seatHolds     SeatHold[]
  theaters      Theater[]
  achievements  UserAchievement[]

  @@index([email])
  @@map("users")
}

model Theater {
  id          String   @id @default(cuid())
  name        String
  nameNe      String   @map("name_ne")
  city        String
  area        String
  address     String
  latitude    Float?
  longitude   Float?
  phone       String?
  email       String?
  description String?
  images      String[]
  amenities   String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String?  @map("owner_id")
  events      Event[]
  screens     Screen[]
  owner       User?    @relation(fields: [ownerId], references: [id])

  @@index([city, isActive])
  @@index([latitude, longitude])
  @@map("theaters")
}

model Screen {
  id           String         @id @default(cuid())
  theaterId    String         @map("theater_id")
  screenNumber Int            @map("screen_number")
  name         String
  capacity     Int
  screenType   String         @default("2D")
  layoutConfig Json
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  theater      Theater        @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  categories   SeatCategory[]
  showtimes    Showtime[]

  @@unique([theaterId, screenNumber])
  @@index([theaterId])
  @@map("screens")
}

model SeatCategory {
  id         String   @id @default(cuid())
  screenId   String   @map("screen_id")
  categoryId String   @map("category_id")
  name       String
  nameNe     String   @map("name_ne")
  price      Float
  color      String
  features   String[]
  rowMapping String[] @map("row_mapping")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  screen     Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  seats      Seat[]

  @@unique([screenId, categoryId])
  @@index([screenId])
  @@map("seat_categories")
}

model Event {
  id             String        @id @default(cuid())
  title          String
  titleNe        String        @map("title_ne")
  description    String
  descriptionNe  String        @map("description_ne")
  category       EventCategory
  status         EventStatus   @default(UPCOMING)
  imageUrl       String        @map("image_url")
  galleryImages  String[]      @map("gallery_images")
  theaterId      String?       @map("theater_id")
  venue          String
  venueNe        String        @map("venue_ne")
  location       String
  locationNe     String        @map("location_ne")
  eventDate      DateTime      @map("event_date")
  endDate        DateTime      @map("end_date")
  priceMin       Float         @map("price_min")
  priceMax       Float         @map("price_max")
  totalSeats     Int           @map("total_seats")
  availableSeats Int           @map("available_seats")
  isFeatured     Boolean       @default(false) @map("is_featured")
  isActive       Boolean       @default(true) @map("is_active")
  tags           String[]
  organizer      String?
  ageRestriction String?       @map("age_restriction")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String        @map("created_by")
  bookings       Booking[]
  theater        Theater?      @relation(fields: [theaterId], references: [id])
  reviews        Review[]
  sessions       EventSession[]
  ticketTypes    TicketType[]

  @@index([category, status, isActive])
  @@index([eventDate, endDate])
  @@index([isFeatured])
  @@map("events")
}

// Event sessions support single or multi-slot events
model EventSession {
  id          String   @id @default(cuid())
  eventId     String   @map("event_id")
  name        String?
  startsAt    DateTime @map("starts_at")
  endsAt      DateTime @map("ends_at")
  capacity    Int?     // Optional overall capacity for GA events at session level
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketTypes TicketType[]

  @@index([eventId, startsAt])
  @@map("event_sessions")
}

// Ticket types support GA/Seated/Zone tiers with capacities
model TicketType {
  id            String        @id @default(cuid())
  eventId       String        @map("event_id")
  sessionId     String?       @map("session_id")
  name          String
  ticketKind    TicketKind    @map("ticket_kind") // GA | SEATED | ZONE
  price         Float
  capacity      Int?          // optional per-type capacity (for GA/ZONE)
  sold          Int           @default(0)
  salesStart    DateTime?     @map("sales_start")
  salesEnd      DateTime?     @map("sales_end")
  perUserLimit  Int?          @map("per_user_limit")
  isActive      Boolean       @default(true) @map("is_active")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  session       EventSession? @relation(fields: [sessionId], references: [id])

  @@index([eventId, sessionId, isActive])
  @@map("ticket_types")
}

model Movie {
  id            String     @id @default(cuid())
  title         String
  titleNe       String     @map("title_ne")
  description   String
  descriptionNe String     @map("description_ne")
  posterUrl     String     @map("poster_url")
  genre         String[]
  duration      Int
  language      String[]
  rating        String
  releaseDate   DateTime   @map("release_date")
  endDate       DateTime?  @map("end_date")
  trailerUrl    String?    @map("trailer_url")
  galleryImages String[]   @map("gallery_images")
  director      String?
  cast          String[]
  isTrending    Boolean    @default(false) @map("is_trending")
  isActive      Boolean    @default(true) @map("is_active")
  imdbRating    Float?     @map("imdb_rating")
  tmdbId        String?    @map("tmdb_id")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdBy     String     @map("created_by")
  reviews       Review[]
  showtimes     Showtime[]

  @@index([isTrending, isActive])
  @@index([releaseDate])
  @@index([endDate])
  @@index([genre])
  @@map("movies")
}

model Showtime {
  id             String    @id @default(cuid())
  movieId        String    @map("movie_id")
  screenId       String    @map("screen_id")
  showDate       DateTime  @map("show_date")
  showTime       String    @map("show_time")
  price          Float
  totalSeats     Int       @map("total_seats")
  availableSeats Int       @map("available_seats")
  format         String    @default("2D")
  language       String
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  seats          Seat[]
  movie          Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  screen         Screen    @relation(fields: [screenId], references: [id])

  @@index([movieId, showDate])
  @@index([screenId, showDate])
  @@map("showtimes")
}

model Seat {
  id         String       @id @default(cuid())
  showtimeId String?      @map("showtime_id")
  eventId    String?      @map("event_id")
  screenId   String       @map("screen_id")
  categoryId String       @map("category_id")
  seatNumber String       @map("seat_number")
  row        String
  column     Int
  price      Float
  status     SeatStatus   @default(AVAILABLE)
  bookedBy   String?      @map("booked_by")
  bookingId  String?      @map("booking_id")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  seatHolds  SeatHold[]
  category   SeatCategory @relation(fields: [categoryId], references: [id])
  showtime   Showtime?    @relation(fields: [showtimeId], references: [id], onDelete: Cascade)

  @@unique([showtimeId, seatNumber])
  @@index([showtimeId, status])
  @@index([eventId, status])
  @@map("seats")
}

model SeatHold {
  id        String   @id @default(cuid())
  seatId    String   @map("seat_id")
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now())
  seat      Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([userId])
  @@map("seat_holds")
}

model Booking {
  id               String        @id @default(cuid())
  bookingReference String        @unique @map("booking_reference")
  bookingType      BookingType   @map("booking_type")
  eventId          String?       @map("event_id")
  showtimeId       String?       @map("showtime_id")
  userId           String        @map("user_id")
  customerName     String        @map("customer_name")
  customerEmail    String        @map("customer_email")
  customerPhone    String        @map("customer_phone")
  seats            String[]
  seatCount        Int           @map("seat_count")
  ticketPrice      Float         @map("ticket_price")
  convenienceFee   Float         @default(0) @map("convenience_fee")
  foodAmount       Float         @default(0) @map("food_amount")
  discountAmount   Float         @default(0) @map("discount_amount")
  totalAmount      Float         @map("total_amount")
  paymentMethod    PaymentMethod @map("payment_method")
  paymentStatus    PaymentStatus @default(PENDING) @map("payment_status")
  bookingStatus    BookingStatus @default(PENDING) @map("booking_status")
  bookingSource    BookingSource @default(SHOWSEWA) @map("booking_source")
  transactionId    String?       @map("transaction_id")
  promoCode        String?       @map("promo_code")
  qrCode           String?       @map("qr_code")
  checkedInAt      DateTime?     @map("checked_in_at")
  checkedInBy      String?       @map("checked_in_by")
  foodItems        Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  event            Event?        @relation(fields: [eventId], references: [id])
  showtime         Showtime?     @relation(fields: [showtimeId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([bookingReference])
  @@index([paymentStatus, bookingStatus])
  @@map("bookings")
}

model Review {
  id           String         @id @default(cuid())
  itemType     ReviewItemType @map("item_type")
  movieId      String?        @map("movie_id")
  eventId      String?        @map("event_id")
  userId       String         @map("user_id")
  rating       Float
  review       String?
  title        String?
  helpfulCount Int            @default(0) @map("helpful_count")
  isVerified   Boolean        @default(false) @map("is_verified")
  isApproved   Boolean        @default(true) @map("is_approved")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  event        Event?         @relation(fields: [eventId], references: [id])
  movie        Movie?         @relation(fields: [movieId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@index([movieId, isApproved])
  @@index([eventId, isApproved])
  @@index([userId])
  @@map("reviews")
}

model PromoCode {
  id            String       @id @default(cuid())
  code          String       @unique
  description   String?
  discountType  DiscountType @map("discount_type")
  discountValue Float        @map("discount_value")
  minAmount     Float        @default(0) @map("min_amount")
  maxDiscount   Float?       @map("max_discount")
  minTickets    Int          @default(1) @map("min_tickets")
  usageLimit    Int?         @map("usage_limit")
  usedCount     Int          @default(0) @map("used_count")
  perUserLimit  Int          @default(1) @map("per_user_limit")
  validFrom     DateTime     @map("valid_from")
  validUntil    DateTime     @map("valid_until")
  applicableFor String[]
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([code, isActive])
  @@index([validFrom, validUntil])
  @@map("promo_codes")
}

model LoyaltyPoint {
  id             String      @id @default(cuid())
  userId         String      @unique @map("user_id")
  points         Int         @default(0)
  tier           LoyaltyTier @default(BRONZE)
  lifetimePoints Int         @default(0) @map("lifetime_points")
  perks          String[]
  nextTierPoints Int         @map("next_tier_points")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tier])
  @@map("loyalty_points")
}

model PointsHistory {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  points      Int
  action      String
  description String?
  bookingId   String?  @map("booking_id")
  createdAt   DateTime @default(now())

  @@index([userId])
  @@map("points_history")
}

model Achievement {
  id               String              @id @default(cuid())
  name             String
  nameNe           String              @map("name_ne")
  description      String
  category         AchievementCategory
  icon             String
  points           Int
  criteria         Json
  isActive         Boolean             @default(true) @map("is_active")
  createdAt        DateTime            @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  achievementId String      @map("achievement_id")
  unlockedAt    DateTime    @default(now()) @map("unlocked_at")
  progress      Int         @default(0)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}

model UserTheme {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  mode         String   @default("system")
  primaryColor String   @default("#e74c3c") @map("primary_color")
  accentColor  String   @default("#3498db") @map("accent_color")
  fontSize     String   @default("medium") @map("font_size")
  compactMode  Boolean  @default(false) @map("compact_mode")
  showBanner   Boolean  @default(true) @map("show_banner")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_themes")
}

model FoodItem {
  id          String       @id @default(cuid())
  theaterId   String       @map("theater_id")
  name        String
  nameNe      String       @map("name_ne")
  description String?
  category    FoodCategory
  price       Float
  imageUrl    String?      @map("image_url")
  isAvailable Boolean      @default(true) @map("is_available")
  isVeg       Boolean      @default(true) @map("is_veg")
  comboItems  String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([theaterId, isAvailable])
  @@map("food_items")
}

model Newsletter {
  id           String   @id @default(cuid())
  email        String   @unique
  isActive     Boolean  @default(true) @map("is_active")
  subscribedAt DateTime @default(now()) @map("subscribed_at")

  @@index([email, isActive])
  @@map("newsletters")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String
  link      String?
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now())

  @@index([userId, isRead])
  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
  THEATER_OWNER
}

enum EventCategory {
  CONCERT
  FESTIVAL
  SPORTS
  THEATER
  COMEDY
  WORKSHOP
  EXHIBITION
  OTHER
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  BLOCKED
  MAINTENANCE
}

enum BookingType {
  EVENT
  MOVIE
}

enum PaymentMethod {
  ESEWA
  KHALTI
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum BookingSource {
  SHOWSEWA
  WALK_IN
  OTHER_PLATFORM
  POS_SYSTEM
}

enum ReviewItemType {
  MOVIE
  EVENT
  THEATER
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum AchievementCategory {
  BOOKING
  SOCIAL
  LOYALTY
  SPECIAL
}

// Kinds of ticketing supported for events
enum TicketKind {
  GA
  SEATED
  ZONE
}

enum FoodCategory {
  POPCORN
  DRINKS
  COMBOS
  SNACKS
  MEALS
}

enum NotificationType {
  BOOKING_CONFIRMATION
  EVENT_REMINDER
  PAYMENT_SUCCESS
  OFFER
  ACHIEVEMENT
}
